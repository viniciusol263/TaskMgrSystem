// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccountStructs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AccountStructs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AccountStructs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AccountStructs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AccountStructs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AccountStructs_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace AccountServiceIPC {

enum AccountHandlerStatusCode : int {
  AccountSuccessfullyCreated = 0,
  AccountSuccessfullyDeleted = 1,
  AccountAlreadyExists = 2,
  AccountCouldntBeFound = 3,
  FailedToCreateAccount = 4,
  FailedToDeleteAccount = 5,
  NotAuthenticatedAccount = 6,
  AccountHandlerStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AccountHandlerStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AccountHandlerStatusCode_IsValid(int value);
constexpr AccountHandlerStatusCode AccountHandlerStatusCode_MIN = AccountSuccessfullyCreated;
constexpr AccountHandlerStatusCode AccountHandlerStatusCode_MAX = NotAuthenticatedAccount;
constexpr int AccountHandlerStatusCode_ARRAYSIZE = AccountHandlerStatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountHandlerStatusCode_descriptor();
template<typename T>
inline const std::string& AccountHandlerStatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountHandlerStatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountHandlerStatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountHandlerStatusCode_descriptor(), enum_t_value);
}
inline bool AccountHandlerStatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AccountHandlerStatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountHandlerStatusCode>(
    AccountHandlerStatusCode_descriptor(), name, value);
}
enum AccountAuthenticationStatusCode : int {
  AuthenticatedAccount = 0,
  ErrorAuthenticationAccount = 1,
  AccountAuthenticationStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AccountAuthenticationStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AccountAuthenticationStatusCode_IsValid(int value);
constexpr AccountAuthenticationStatusCode AccountAuthenticationStatusCode_MIN = AuthenticatedAccount;
constexpr AccountAuthenticationStatusCode AccountAuthenticationStatusCode_MAX = ErrorAuthenticationAccount;
constexpr int AccountAuthenticationStatusCode_ARRAYSIZE = AccountAuthenticationStatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountAuthenticationStatusCode_descriptor();
template<typename T>
inline const std::string& AccountAuthenticationStatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountAuthenticationStatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountAuthenticationStatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountAuthenticationStatusCode_descriptor(), enum_t_value);
}
inline bool AccountAuthenticationStatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AccountAuthenticationStatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountAuthenticationStatusCode>(
    AccountAuthenticationStatusCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace AccountServiceIPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::AccountServiceIPC::AccountHandlerStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AccountServiceIPC::AccountHandlerStatusCode>() {
  return ::AccountServiceIPC::AccountHandlerStatusCode_descriptor();
}
template <> struct is_proto_enum< ::AccountServiceIPC::AccountAuthenticationStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AccountServiceIPC::AccountAuthenticationStatusCode>() {
  return ::AccountServiceIPC::AccountAuthenticationStatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AccountStructs_2eproto
